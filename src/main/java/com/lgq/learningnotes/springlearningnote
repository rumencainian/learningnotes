ioc原理
第一步： 创建XMl配置文件，配置需要创建对象类
<Bean id="userService" class="com.***.***"/>

第二步
创建工厂类，使用dom4j解析配置文件+反射

     //返回
     public static UserService getService(){

     //1使用dom4j解析XML文件
     //根据id值userService,得到id值对应class属性值

     String classValue="class属性值"；

     //2使用反射创建类对象
     Class clazz=Class.forName(classValue);

     //创建类对象
     UserService service=clazz.newInstance();
     return service;
     }
IOC入门案例
第一步：导入jar包
第二步：创建类，在类里面创建方法
第三步：创建spring配置文件，配置创建类
(1)spring核心配置文件名称和位置不是固定的
第四步：写代码测试对象创建

IOC和DI区别
（1）IOC：控制反正，将对象创建给spring进行配置
（2）DI：依赖注入，向类里面得属性中设置值
（3）关系：依赖注入不能单独存在，需要在IOC基础之上完成操作

AOP概念
1、AOP：面向切面编程，扩展功能不修改源代码实现
2、AOP采取横向抽取机制，取代了传统纵向继承体系重复性代码
AOP原理
横向抽取机制特点：底层使用动态代理方式实现
第一种情况                                                         第二种情况

        public interface Dao{                                        public class User{
                                                                           public void add(){
          public void add();
                                                                               }
         }                                                                   }
使用动态代理方式 创建接口实现类代理对象                               动态代理实现
*创建和DaoImpl类平级对象                                            *创建User类的子类的代理对象
*这个对象不是真正的对象，代理对象，实现和DaoImpl相同的功能             *在子类里面调用父类的方法完成增强
public class DaoImpl implements Dao{

    public void add(){
      //添加逻辑
     }
}


public class User{                                          连接点：类方法哪些方法可以被增强，这些方法称为连接点
                                                            切入点：在类里面可以有很多得方法被增强，比如实际操作中，只是增强了类里面得add方法和update方法
public void add(){}                                                 ，实际增强的方法称为切入点

public void update(){}



}



